# Loading Movie Lens dataset into RDDs
# Collaborative filtering is a technique for recommender systems wherein users' ratings and interactions with various products are used to recommend new ones.
# With the advent of Machine Learning and parallelized processing of data, recommender systems have become widely popular in recent years, and are utilized in a variety of areas including movies, music, news, books, research articles, search queries, social tags.
# In this 3-part exercise, your goal is to develop a simple movie recommendation system using PySpark MLlib using a subset of MovieLens 100k dataset.
# In the first part, you'll first load the MovieLens data (ratings.csv) into RDD and from each line in the RDD which is formatted as userId,movieId,rating,timestamp, 
# you'll need to map the MovieLens data to a Ratings object (userID, productID, rating) after removing timestamp column and finally you'll split the RDD into training and test RDDs.


# Model training and predictions
# After splitting the data into training and test data, in the second part of the exercise, you'll train the ALS algorithm using the training data. 
# PySpark MLlib's ALS algorithm has the following mandatory parameters - rank (the number of latent factors in the model) and iterations (number of iterations to run). 
# After training the ALS model, you can use the model to predict the ratings from the test data. 
# For this, you will provide the user and item columns from the test dataset and finally return the list of 2 rows of predictAll() output.


# Model evaluation using MSE
# After generating the predicted ratings from the test data using ALS model, in this final part of the exercise, you'll prepare the data for calculating Mean Square Error (MSE) of the model. 
# The MSE is the average value of (original rating â€“ predicted rating)**2 for all users and indicates the absolute fit of the model to the data.
# To do this, first, you'll organize both the ratings_final and predictions RDDs to make a tuple of ((user, product), rating)). In both RDDs the mapping is:

0: user
1: product
2: rating

# Then you'll join transformed RDDs and finally apply a squared difference function along with mean() to get the MSE.